---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kibana
  labels:
    app: kibana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kibana
  template:
    metadata:
      labels:
        app: kibana
    spec:
      serviceAccount: kibana
      containers:
      - name: kibana
        image: docker.elastic.co/kibana/kibana-oss:7.1.1
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            cpu: 1
          requests:
            cpu: 100m
        ports:
        - containerPort: 5601
          name: ui
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /api/status
            port: ui
          initialDelaySeconds: 5
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/status
            port: ui
          initialDelaySeconds: 5
          timeoutSeconds: 10
        volumeMounts:
          - name: kibana-config
            mountPath: /usr/share/kibana/config/
      - name: oauth-proxy
        image: openshift/oauth-proxy:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8443
        args:
          - --https-address=:8443
          - --provider=openshift
          - --openshift-service-account=kibana
          - --upstream=http://localhost:8080
          - --tls-cert=/etc/tls/private/tls.crt
          - --tls-key=/etc/tls/private/tls.key
          - --cookie-secret=SECRET
        volumeMounts:
          - mountPath: /etc/tls/private
            name: proxy-tls
      - name: nginx
        image: docker-registry.default.svc:5000/openshift/nginx:1.16
        imagePullPolicy: IfNotPresent
        command:
          - /opt/rh/rh-nginx116/root/usr/sbin/nginx
          - -c
          - /conf/nginx.conf
        ports:
        - containerPort: 8080
        volumeMounts:
          - name: nginx-config
            mountPath: /conf
      volumes:
        - name: proxy-tls
          secret:
            secretName: proxy-tls
        - name: kibana-config
          configMap:
            name: kibana
            items:
            - key: kibana.yml
              path: kibana.yml
        - name: nginx-config
          configMap:
            name: kibana
            items:
            - key: nginx.conf
              path: nginx.conf
---
apiVersion: v1
kind: Service
metadata:
  name: kibana
  labels:
    app: kibana
  annotations:
    service.alpha.openshift.io/serving-cert-secret-name: proxy-tls
spec:
  type: ClusterIP
  ports:
  - port: 5601
    targetPort: 5601
    name: kibana
    protocol: TCP
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: http
  - port: 8443
    targetPort: 8443
    name: https
    protocol: TCP
  selector:
    app: kibana
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  labels:
    app: kibana
  name: kibana
spec:
  port:
    targetPort: https
  tls:
    insecureEdgeTerminationPolicy: Redirect
    termination: reencrypt
  to:
    kind: Service
    name: kibana
    weight: 100
  wildcardPolicy: None
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kibana
  labels:
    app: kibana
  annotations:
    serviceaccounts.openshift.io/oauth-redirectreference.primary: '{"kind":"OAuthRedirectReference","apiVersion":"v1","reference":{"kind":"Route","name":"kibana"}}'
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kibana
  labels:
    app: kibana
data:
  kibana.yml: |
    server.name: kibana
    server.host: "0.0.0.0"
    elasticsearch.hosts: https://vpc-training0-xa4aeodteo7n7c2m7bpyszvdoi.eu-central-1.es.amazonaws.com/
    elasticsearch.username: ""
    elasticsearch.password: ""
    #xpack.security.enabled: false
  nginx.conf: |
    worker_processes auto;
    error_log /dev/stdout warn;
    pid /run/nginx.pid;
    daemon off;

    # Load dynamic modules. See /usr/share/nginx/README.dynamic.
    # include /opt/rh/rh-nginx116/root/usr/share/nginx/modules/*.conf;

    events {
        worker_connections 1024;
    }

    http {
      sendfile        on;
      tcp_nopush      on;
      tcp_nodelay     on;
      keepalive_timeout  65;
      types_hash_max_size 2048;
      access_log /dev/stdout;

      server {
        listen 8080 default_server;

        include /etc/nginx/mime.types;

        location / {
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header Authorization "Basic TBD"; # base64-encoded username:password to pass in header
          proxy_pass http://localhost:5601/; # actual kibana URL
        }
      }
    }
